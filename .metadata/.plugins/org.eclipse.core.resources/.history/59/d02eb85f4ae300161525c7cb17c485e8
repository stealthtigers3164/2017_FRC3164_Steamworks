package org.usfirst.frc.team3164.robot.movement;

import java.util.ArrayList;

import org.usfirst.frc.team3164.robot.electrical.motor.BasicMotor;
import org.usfirst.frc.team3164.robot.electrical.motor.MotorSet;
import org.usfirst.frc.team3164.robot.input.Gamepad;

public class Lift<T extends BasicMotor> extends MotorSet<T> {
	
		
	private ArrayList<T> motors;
	
	private int firstLiftMotorIndex;	
	private int secondLiftMotorIndex;


	private Gamepad gamePad;
	
	private boolean update;

	
	public Lift(T flMotor, T slMotor) {
		//NOTE if you change the order of which the motors are added then the indices will change as well
		motors = new ArrayList<T>();
		firstLiftMotorIndex = addMotor(flMotor);
		secondLiftMotorIndex = addMotor(slMotor);

	}
	

	
	/**
	 * Drive train made to mimic video games.
	 * Intended to use the triggers as the Y axis
	 * @param axisX used to turn [-1,1]
	 * @param axisY used to go forward [-1,1]
	 */
	public void forzaDrive(double axisX, double axisY) {
		axisX = -100 * scaleJoysticks(axisX, true);
		axisY = 100 * scaleJoysticks(axisY);
		
		double v = (100 - Math.abs(axisX)) * (axisY/100) + axisY;
		double w = (100 - Math.abs(axisY)) * (axisX/100) + axisX;
		
		double r = (v+w)/200;
		double l = (v-w)/200;
		
		setLeftPower(l);
		setRightPower(r);
		
	}
	
	/**
	 * Multiplies the axis by the scale factor
	 * @param number joystick axis 
	 * @return
	 */
	private double scaleJoysticks(double number) {
		return number * scaleFactor;
	}
	

	}
	

	


	@Override
	public ArrayList<T> getMotors() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public T getMotorByIndex(int Index) {
		return motors.get(Index);
	}

	@Override
	public int addMotor(T Motor) {
		if (motors.add(Motor))
			return motors.size() - 1;
		else
			return -1;
	}

	@Override
	public void updateMotors() {
		
		
		
	}

	@Override
	public boolean shouldUpdate() {
		return update;
	}
	
	public void setUpdate(boolean Update) {
		update = Update;
	}
	
	
}
